INCEDO INTERVIEW QUESTIONS
==========================
1. How one microservice can communicate with other microservice?
2. What gateway did you used?
3. What Discovery Pattern did you used?
4. Explain about Eureka Design Pattern
5. what is Profiles in Spring Boot?
6. Write controller class for User
7. Write repositry for user
8. What is the difference between throw and throws?


9. Write a Java8 Program to find how many time each element was repeated and sort the object by value in descending order.(With out using stream filter method).
Input: ["cat", "dog", "cat", "ant", "cow", "cow", "rat", "cow"]

10. Write a java program that reorders the digits of each numerical element in an array based on descending order.
Input: [515, 341, 98]
Descending order  -> [551, 431, 98]


1. How one microservice can communicate with other microservice?
================================================================
3 ways 
======
using RestTemplate [only synchronization]
using WebClient    [both synch and asych]
using FeighnClient [for reactive app]


2. What gateway did you used?
==============================
1)API Gateway
===============
-> we used ApiGateway

-> Api Gateway will act as an Entry point for our backend apis

-> It acts as mediator between endusers and backend apis

-> API Gateway contains "Filters" and "Routing"

-> Filters we can use to authenticate incoming requests			FILTER		=>	[AIR]

-> Routing will decide which request should go to which backend api		ROUTING		=>    WHICH REQ SHOULD GO TO WHICH BACKEND API

Note: In previous versions we have Zuul Proxy as API Gateway but now it got removed from latest version of boot

-> Spring Cloud Gateway we can use as API Gateway for our application


3. What Discovery Pattern did you used?   4. Explain about Eureka Design Pattern
=========================================
Service Registry  
===================
	TO REGSTR ALL BACKEND API
	MANTAIN ALL SERVICE ==>BSUN(SNAMES,SURLS,SERVICES]
	EurekaServer ==>	service registry
	
	-> ServiceRegistry is used to "register" all our backend services/apis

	-> Service Registry will "maintain" service status, urls ,names  , and of each service[SUN]

	-> We can use EurekaServer as a service registry

Note: EurekaServer provided by ==> Spring Cloud Netf lix Library







1. What is the superclass of all classes in java?
2. What are the methods in object class?
3. What is diamond problem in inheritence?
4. Difference between Interface & Abstraction?
5. Hashmap internal working?
6. Explain Internal flow of ArrayList
7. Explain about Method overriding & method overloading?
8. Explain @Authoriad,@Qualifier?
9. What is Dependency injection?
10. Singleton design pattern -singleton class code?
11. How we can achieve obstraction?
12. what is deadlock in multithreading?
13. Explain about Thread life cycle
14. Can we create immutable object?
15. Explain static polymorphysim & dynamic polymorphysim?
16. What is the use of static?
17. What is data inconsistancy problem?
18. Differences between List & Set?
19. Explain about Bean lifecycle
20. What is Ioc?
21. What is dependency injection?
22. what are different types of dependency injections?
23. What are the different types of bean scopes in spring
24. what is the use of @Component scan?
	            @Configuration?
		    @Enable auto configuration?
25. Explain about @spring boot application?
26. Differences between setter injection and constructor injection?
27. Explain architecture of microservices?
28. Explain spring boot application internal flow?
29. What is Actuator in spring boot
30. Difference between west controller and controller?
31. Whar are different HTTP methods?
32. Differnces between put and post method?
33. Explain about swagger?
34. How can you apply spring security to the application?
35. Explain about O-Auth 2 security?
36. How we can handle the exceptions?
37. Differences between HashSet and HashMap?
38. Differences between ArrayList and LinkedList?
39. Differences between Comparable and Comparator?
40. What are the java 8 features?
41. What is the use of lamda expressions?
42. What is funtional interface?
43. Differences between funtion and predicate?
44. Explain about streams?
45. Differences between stream api and streams?
46. Differences between string, string buffer and string builder?
47. What is string constant pool?
48. What is reflection in java?
49. What is cloning in java?
50. Write a test case to saveEmployee by using mockito.



L1
===
Differences b/w hashtable and concurrent hashmap
Differences b/w load and get methods
Differences b/w abstraction and encapsulation
How you implement abstraction and encapsulation in your project?
What is immutability? How you create custom immutable class?
What is dependency injection? What are different types of dependency Injections?
What is Optional class?
When we use @Autowired how dependency will be injected?
What is method overloading and method overriding?






Java Program to Create An Immutable Class
=========================================
step-1 :: makes class as final
step-2 :: makes fields as final and private 
step-3 :: don't provide setter() methods
step-4 :: make final methods

import java.util.HashMap;
import java.util.Map;
 
final class Student {

    private final String name;
    private final int regNo;
    private final Map<String, String> metadata;
 
    public Student(String name, int regNo,
                   Map<String, String> metadata)
    {
        this.name = name;
        this.regNo = regNo;
 
        Map<String, String> tempMap = new HashMap<>();
 
        for (Map.Entry<String, String> entry :
             metadata.entrySet()) {
            tempMap.put(entry.getKey(), entry.getValue());
        }
 
        this.metadata = tempMap;
    }
 
    
    public String getName() { return name; }
 
   
    public int getRegNo() { return regNo; }
   
 
    public Map<String, String> getMetadata()
    {
 
        Map<String, String> tempMap = new HashMap<>();
 
        for (Map.Entry<String, String> entry :
             this.metadata.entrySet()) {
            tempMap.put(entry.getKey(), entry.getValue());
        }
        return tempMap;
    }
}

What is the difference between get() and load() methods
======================================================
In hibernate, get() and load() are two methods which is used to fetch data for the given identifier.
 They both belong to Hibernate session class. 


 Get() method
 =============
  return null, If no row is available in the session cache or the database for the given identifier

  whereas 
  load() method
  ==============
   throws object not found exception. 












Get()
Load()
1

Basic 

It  is used to fetch data from the database for the given identifier  

It  is also used to fetch data from the database for the given identifier 

2

Null Object 

It object not found for the given identifier then it will return null object 

It will throw object not found exception 

3



Lazy or Eager loading 

It returns fully initialized object so this method eager load the object  

It always returns proxy object so this method is lazy load the object  

4

Performance 

It is slower than load() because it return fully initialized object which impact the performance of the application 

It is slightly faster.

5.

Use Case

If you are not sure that object exist then use get() method 

If you are sure that object exist then use load() method 

Example of Get() in Hibernate
@Entity
public class User {
   @Id
   Integer id;
   String name;
   public Integer getId() {
      return id;
   }
   public void setId(Integer id) {
      this.id = id;
   }
   public String getName() {
      return name;
   }
   public void setName(String name) {
      this.name = name;
   }
}
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import com.journaldev.hibernate.util.HibernateUtil;
public class GetExample {
   public static void main(String[] args) {
      //get session factory to start transcation
      SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
      Session session = sessionFactory.openSession();
      Transaction tx = session.beginTransaction();
      //Get Example
      User user = (User) session.get(User.class, new Integer(2));
      System.out.println("User ID= "+user.getId());
      System.out.println("User Name= "+user.getName());
      //Close resources
      tx.commit();
      sessionFactory.close();
   }
}
Example of Load() in Hibernate
@Entity
public class User {
   @Id
   Integer id;
   String name;
   public Integer getId() {
      return id;
   }
   public void setId(Integer id) {
      this.id = id;
   }
   public String getName() {
      return name;
   }
   public void setName(String name) {
      this.name = name;
   }
}
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import com.journaldev.hibernate.util.HibernateUtil;
public class LoadExample {
   public static void main(String[] args) {
      //get session factory to start transcation
      SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
      Session session = sessionFactory.openSession();
      Transaction tx = session.beginTransaction();
      //Load Example
      User user = (User) session.load(User.class, new Integer(2));
      System.out.println("User ID= "+user.getId());
      System.out.println("User Name= "+user.getName());  
      //Close resources
      tx.commit();
      sessionFactory.close();
   }
}}

App Archid
==========
1. What is Dependency Injection?

2. What is autowiring?

3. What are the different Scopes in Spring?

4. What is Application Context?

5. What are the Named Queries?

6. How you choose the Collection?

7. On what collection classes did you worked on?

8. Explain the ArrayList and HasMap classes?

9. What are the Design Patterns you worked on?

10. What is mutable and immutable classes in Java?

11. What are the differences between String and StringBuffer?

12. How we can make a class as Singleton class in Java?

13. What is Synchronization in Java?

14.Write a Program to Print the common even numbers from the two Arrays given below:

    a = [ 10, 3, 12, 5, 9, 6 ]
    b = [ 6, 2, 10, 12, 1, 7 ]

for(int i=0;i<length();i++){
for(int j=i+1;j<length();j++){

if(a[i%2==0]==a[j%2==0){
int temp=a[j];
a[j]=a[i];
a[j]=temp;

SOP(a[j]);


Accenture
=========
1. Differences b/w throws and throw keywords

2. Differences b/w PutMapping and PatchMapping

3. Differences b/w Spring and SpringBoot

4. Differences b/w Collections and Streams

5. What are the methods available in the Restful services?

6. What are the thread safe collections in java?

7. How did you handled the exception in your project?

8. How you can customize the Bad Request

9. What is Dead lock? and what are the conditions for Dead lock?

10. Explain about notify() and notifyAll() methods

11. Explain about yield() method?

12. What is Recursion in java?

13. Howmany minimum tables required for OneToMany and ManyToOne relationship?

14. How can we create an immutable class? Write code for that

15. Can we override static methods?

16. What is method overloading and method over riding?

17. Explain about Singleton class and write code for that

18. Write a program for finding the even numbers without using modulo division

MONOCEPT
========
1. Explain about Architecture of your Project?

2. Which Design Patterns did you used in your project?

3. How you provided the security for your Application?

4. What is the difference between Access Token and Refresh Token?

5. Explain about the mutability and immutability
==========================================================================================
Mutability:
============

Use mutable objects when you need to represent entities whose state changes over time.

Mutable objects might be more memory-efficient in certain scenarios where frequent changes are required.


Immutability:
============
Use immutable objects when simplicity, thread safety, and predictability are essential.

Immutability is often preferred for value objects, constants, and instances that should not change their state.

6. How we can create an immutable class?
==========================================================================================
Make the class final, 

Make fields private and final, 

Don't provide setter methods: , 

Initialize fields in the constructor:,

Return a new instance for mutable components:,

Avoid modifying Date and other mutable objects directly: 
------------------------------------------------------------------------------------
public final class ImmutableClass {
    private final int intValue;
    private final String stringValue;
    private final List<String> listValue;

    // Constructor to initialize fields
    public ImmutableClass(int intValue, String stringValue, List<String> listValue) {
        this.intValue = intValue;
        this.stringValue = stringValue;
        // Make a defensive copy of the list to avoid external modification
        this.listValue = new ArrayList<>(listValue);
    }

    // Getter methods - no setters

    public int getIntValue() {
        return intValue;
    }

    public String getStringValue() {
        return stringValue;
    }

    // Return a defensive copy of the list to avoid external modification
    public List<String> getListValue() {
        return new ArrayList<>(listValue);
    }
}


================================================================================

7. While you are reviewing the PR's what you observe rather the codings standard?
==================================================================================
  ==>  Code Formatting,

  ==> Naming Conventions, 

  ==> Comments,

  ==> Code Duplication:,

  ==> Consistency:,

  ==> Error Handling:, 

  ==> Testing:, 

  ==> Security Concerns:,

  ==> Performance:,

  ==> Dependencies:,

  ==>  Documentation:, 

  ==> Code Modularity:,

  ==> Coding Patterns and Idioms:,

  ==>  Scalability:
==================================================================================
8. How you restrict the url with the same credentials from two different systems?
==================================================================================
Session Management:
===================

Use session identifiers and cookies to associate unique sessions with each login, preventing simultaneous logins from different systems.

Device Fingerprinting:
=====================
Generate and store unique fingerprints for devices, checking them during login to identify logins from different systems.


IP Address Tracking:
===================

Validate login sessions based on IP addresses, prompting additional verification for logins from different IP addresses.


OAuth 2.0 and OpenID Connect:
=============================

Leverage OAuth 2.0 and OpenID Connect, utilizing features like the state parameter to maintain authentication state across different systems.


Multi-Factor Authentication (MFA):
=================================

Implement MFA to require additional verification steps, such as codes sent to mobile devices, preventing unauthorized logins.


Token-Based Authentication:
===========================
Issue and validate unique tokens upon successful login, associating them with user sessions for secure authentication.

==================================================================================
9. How you resolve production issues like network latency?


==================================================================================
10. Write a query to get the 3rd highest salary of an employee from the below tables
==================================================================================
LIMIT 1: Indicates that only 1 row should be returned in the result set.

OFFSET 2: Indicates that the query should skip the first two rows in the result set 
------------------------------------------------------------------------------------
SELECT DISTINCT salary
FROM employees
ORDER BY salary DESC
LIMIT 1 OFFSET 2;
==================================================================================



EMPLOYEE
EMPLOYEEID NAME ADDRESS
 
EMPLOYEE DETAILS
EMPLOYEEID SALARY POST


COGNIZANT
=========
1.What is the object class?
2.What are the methods of object class?
3.Clone() of object class performance shallow copy or deep copy?
4.What is the difference between shallow copy and deep copy.
5.How you perform the memory leakage in the project?
6.What are the memory references in java?
7.What is immutability?
8.Suppose in project iam continously required to update the bytes of streams. string will be good option or not?
9.What is the concurrent modification exception?
10.In order to work on the map suppose on the concurrent class like custom class which are the methods that we have to implement?
11.What are the java 8 features?
12.What is the use of static and default methods?
13.Why spring is lazy?
14.How can you create the project in spring boot?
15.Spring contains auto enable feature. what is the exact meaning of it? and example
16.What are the difference between @Service, @Repository, @Component annotations.
17.Instead of @Service annotation can we use @Component annotation?
18.What is Actuator in spring boot?
19.How can we change the port? what is the property to change the port?
20.What are the possible sources of external configuration?
21.What is the static block? where it is stored?
22.Static block calls first or constructor calls first?
23.What is heap memory? can we increase heap memory allocated for application?
24.For an example, Employee class has properties like employye id,employee name,age,salary.employee object contains 100 records.
those are stored in an ArrayList object. From this ArrayList object we need a seperate ArrayList object which consists of 
employees who are having age greater than 30. For this write a code.





Differences b/w Comparable and Comparator
What is the purpose of Optional class?
What is flatmap?
Employee class has 100 objects with fields as id, name, location. Filter the Employees based on perticular location
Explain about Singleton class. Why should we implement Clonable interface?


L2
===
1.What is Optional Class?
2.What is Callable?
3.What is the return type of call()?
4.What is the return type of run()?
5.What is the co-relation between Functional interface and Lamda Expression?
6.Why there is only one method in Functional interface?
7.What is the use of Lamda Expression?
8.What is the load factor of ArrayList?
9.What is the initial capacity of ArrayList?
10.What are the difference between ArrayList and Vector?
11.What is HashSet? Where we use HashSet?
12.What is Immutability? How can we create custom Immutable class?
13.What is hibernate?
14.What is ORM?
15.What is Diaelectic?
16.What is the difference between Collections and Collection?
17.What is dependency injection? How many types are there?
18.What are the different Scopes in Spring?
19.What is the difference between save() and saveUpdate() methods?
20.What is Serialization? What is ssid?
21.What is transient?
22.What is iterable?
23.Differences between StringBuilder and StringBuffer?
24.What is selfjoin?
25.What is Stream API?





INFOSYS
=======
String s="hello";
StringBuffer sb= new StringBuffer();
sb.reverse(s);

String str = "satish";

int lenth = str.length();


for (int i = length; i > = 0; i--) {
	char ch = str.charAt(i);
}


Input : String s= "abcd,njbkj,dsfkjdv,dnkdhk";
Output : abcd-njbkj-dsfkjdv-dnkdhk

str.replace(",","-");

String s="ncjbj bnkxnj njbjbjkcnnjxbkjxckjbxkjbvjkxbvjkxbvjxbxnvjxcbvjxbcjkvbxckjbvjmxbvjcxb";
print repeated words

String [] strs = s.split();
for ()


List<Employee> l= new ArrayList<Employee>();
List<Employee> l2=l.stream().filter(employee.getLocation().equals("Hyd").collect(Collectors::toList);
@RestController
@PostMapping("/save")
public String save(@RequestBody Employee employee){
}

What are the Annotations did you used in SpringBoot?
Differences b/w final, finally and finalize()
In the catch block if there is return statement, then is finally block will execute?
Explain about OOPS concepts in Java
Inheritance is the example of method over loading or method overriding?
What is method over loading and method over riding?
When we will get ConcurrentModificationException occurs?
What is CopyWriteOnArrayList?
What is Serialization?
Explain about JpaRepository
If we want to send a zip file to the database, then which annotation should be used?
Explain about Microservices
If we need to change the server port, then how you will change it?
What are class loaders?
What is singleton class? How can we break singleton class 
How many ways to create an object?










public class Employee{

public static void main

List<Employee> empList= new ArrayList<Employee>();

List<Employee> list=empList.stream().filter(salary->salary<50000).sort().collect(Collectors.toList());
System.out.println(list);

program to print 1 to 100 numbers:
---------------------------------
public class Inte {
	public static void main(String[] args) 
	{
		int number = 1;
		
		printNumbers(number);	
	}
	
	public static void printNumbers(int num)
	{
		if(num <= 100)
		{
			System.out.print(num +" "); 
			printNumbers(num + 1);
		}	
	}

}


findAll(Pageble pageble)

Difference b/w @RequestParam and @PathVariable
Differences b/w Comparable and Comparator
Differences b/w Consumer and Supplier 
what is the method in Consumer?
what are the different scopes in Spring 
Expalin about Spring Security
What is early loading and lazy loading?
How to make the object as early loading?
How do you configure with the data base to the application?

How do you validate the properties?









1. What is the superclass of all classes in java?
======================================================================================================================================================
->  the superclass of all classes is the Object class.

->  The Object class is at the top of the class hierarchy in Java 

->  Object is implicitly the superclass for all other classes.

-> Every class in Java is either directly or indirectly derived from the Object class. 


public class MyClass {
    // Class definition
}


public class MyClass extends Object {
    // Class definition
}

======================================================================================================================================================

2. What are the methods in object class?

======================================================================================================================================================
| Method Signature               | Description                                                                                      |
|--------------------------------|-----------------------------------------------------------------------------------------------------------------------|
|  `boolean equals(Object obj)`   | Compares the current object with another object for equality.                                                          |
----------------------------------------------------------------------------------------------------------------------------------------------------------
| `int hashCode()`               | Returns a hash code value for the object. Used in hash-based data structures.                                          |
----------------------------------------------------------------------------------------------------------------------------------------------------------
| `String toString()`            | Returns a string representation of the object.                                                                         |
----------------------------------------------------------------------------------------------------------------------------------------------------------
| `Class<?> getClass()`          | Returns the runtime class of the object.                                                                               |
----------------------------------------------------------------------------------------------------------------------------------------------------------
| `Object clone()`               t| Creates and returns a copy of the objec. The class must implement `Cloneable`.                                        |
----------------------------------------------------------------------------------------------------------------------------------------------------------
| `void notify()`                | Wakes up a single thread that is waiting on the object.                                                                |
----------------------------------------------------------------------------------------------------------------------------------------------------------
| `void notifyAll()`             | Wakes up all threads that are waiting on the object.                                                                   |
----------------------------------------------------------------------------------------------------------------------------------------------------------
| `void wait()`                  | Causes the current thread to wait until another thread invokes `notify()` or `notifyAll()`.                             |
----------------------------------------------------------------------------------------------------------------------------------------------------------
| `void wait(long timeout)`      | Causes the current thread to wait until another thread invokes `notify()` or `notifyAll()` or a specified amount of time has elapsed.|
----------------------------------------------------------------------------------------------------------------------------------------------------------
| `void wait(long timeout, int nanos)` | Similar to `wait(long timeout)`, with nanosecond precision for timeout.                                         |
----------------------------------------------------------------------------------------------------------------------------------------------------------
| `void finalize()`              | Called by the garbage collector before an object is reclaimed. Can be overridden for cleanup operations.|


======================================================================================================================================================








3. What is diamond problem in inheritence?
==========================================================================================================================================
class A {
    public void doSomething() {
        System.out.println("Method in class A");
    }
}

class B extends A {
    public void doSomething() {
        System.out.println("Method in class B");
    }
}

class C extends A {
    public void doSomething() {
        System.out.println("Method in class C");
    }
}

class D extends B, C { // This is where the diamond problem occurs
}

====================================================================================================================================================

4. Difference between Interface & Abstraction?
5. Hashmap internal working?
6. Explain Internal flow of ArrayList
7. Explain about Method overriding & method overloading?
8. Explain @Authoriad,@Qualifier?
9. What is Dependency injection?
10. Singleton design pattern -singleton class code?
11. How we can achieve obstraction?
12. what is deadlock in multithreading?
13. Explain about Thread life cycle
14. Can we create immutable object?
15. Explain static polymorphysim & dynamic polymorphysim?
16. What is the use of static?
17. What is data inconsistancy problem?
18. Differences between List & Set?
19. Explain about Bean lifecycle
20. What is Ioc?
21. What is dependency injection?
22. what are different types of dependency injections?
23. What are the different types of bean scopes in spring
24. what is the use of @Component scan?
              @Configuration?
        @Enable auto configuration?
25. Explain about @spring boot application?
26. Differences between setter injection and constructor injection?
27. Explain architecture of microservices?
28. Explain spring boot application internal flow?
29. What is Actuator in spring boot
30. Difference between west controller and controller?
31. Whar are different HTTP methods?
32. Differnces between put and post method?
33. Explain about swagger?
34. How can you apply spring security to the application?
35. Explain about O-Auth 2 security?
36. How we can handle the exceptions?
37. Differences between HashSet and HashMap?
38. Differences between ArrayList and LinkedList?
39. Differences between Comparable and Comparator?
40. What are the java 8 features?
41. What is the use of lamda expressions?
42. What is funtional interface?
43. Differences between funtion and predicate?
44. Explain about streams?
45. Differences between stream api and streams?
46. Differences between string, string buffer and string builder?
47. What is string constant pool?
48. What is reflection in java?
49. What is cloning in java?
50. Write a test case to saveEmployee by using mockito.


